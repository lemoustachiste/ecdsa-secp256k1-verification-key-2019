{"version":3,"file":"ecdsa-secp256k1-verification-key-2019.esm.js","sources":["../src/verificationKey.ts","../src/keyUtils.ts"],"sourcesContent":["// @ts-nocheck\nimport base64url from 'base64url'\nimport createHash from 'create-hash'\nimport * as secp256k1 from 'secp256k1'\nimport randomBytes from 'randombytes'\n// @ts-expect-error: implicit type import; not a ts package\nimport cryptoLd from 'crypto-ld'\n// @ts-expect-error: implicit type import; not a ts package\nimport * as base58 from 'base58-universal'\n\nconst SUITE_ID = 'EcdsaSecp256k1VerificationKey2019'\n\nconst sha256 = (data: any) => createHash('sha256').update(data).digest()\n\ntype ExportedKey = {\n  '@context'?: string\n  type: string\n  id: string\n  controller: string\n  publicKeyBase58?: string\n  privateKeyBase58?: string\n  revoked?: boolean\n}\n\ntype EcdsaSecp256k1VerificationKey2019Options = {\n  controller: string\n  id: string\n  revoked?: boolean\n  publicKeyBase58?: string\n  privateKeyBase58?: string\n}\n\ntype EcdsaSecp256k1VerificationKey2019HexKeyOptions = {\n  controller: string\n  id: string\n  revoked?: boolean\n  publicKeyHex?: string\n  privateKeyHex?: string\n}\n\nexport class EcdsaSecp256k1VerificationKey2019 extends cryptoLd.LDKeyPair {\n  public type: string\n\n  public publicKeyBase58?: string\n\n  public privateKeyBase58?: string\n\n  constructor({ publicKeyBase58, privateKeyBase58, ...options }: EcdsaSecp256k1VerificationKey2019Options) {\n    super(options)\n\n    if (privateKeyBase58 && !publicKeyBase58) {\n      const publicKey = secp256k1.publicKeyCreate(base58.decode(privateKeyBase58))\n      this.publicKeyBase58 = base58.encode(publicKey)\n    } else {\n      this.publicKeyBase58 = publicKeyBase58\n    }\n\n    this.type = SUITE_ID\n    this.privateKeyBase58 = privateKeyBase58\n\n    if (!this.publicKeyBase58) {\n      throw new TypeError('The \"publicKeyBase58\" property is required.')\n    }\n  }\n\n  static from(options: EcdsaSecp256k1VerificationKey2019Options | EcdsaSecp256k1VerificationKey2019HexKeyOptions) {\n    if ((options as any).publicKeyHex || (options as any).privateKeyHex) {\n      const { publicKeyHex, privateKeyHex, ...rest } = options as any\n\n      return new EcdsaSecp256k1VerificationKey2019({\n        ...rest,\n        publicKeyBase58: publicKeyHex ? base58.encode(Buffer.from(publicKeyHex, 'hex')) : undefined,\n        privateKeyBase58: privateKeyHex ? base58.encode(Buffer.from(privateKeyHex, 'hex')) : undefined,\n      })\n    }\n\n    return new EcdsaSecp256k1VerificationKey2019(options)\n  }\n\n  static async generate({\n    seed,\n    compressed,\n    ...keyPairOptions\n  }: Omit<EcdsaSecp256k1VerificationKey2019Options, 'publicKeyBase58' | 'privateKeyBase58'> & { seed?: Uint8Array; compressed?: boolean }) {\n    if (seed && !secp256k1.privateKeyVerify(seed)) {\n      throw new Error('Provided seed is not a valid private key')\n    }\n\n    let privateKey = seed\n\n    while (typeof privateKey === 'undefined' || !secp256k1.privateKeyVerify(privateKey)) {\n      privateKey = new Uint8Array(randomBytes(32))\n    }\n\n    const publicKey = secp256k1.publicKeyCreate(privateKey, compressed)\n\n    return new EcdsaSecp256k1VerificationKey2019({\n      publicKeyBase58: base58.encode(publicKey),\n      privateKeyBase58: base58.encode(privateKey),\n      ...keyPairOptions,\n    })\n  }\n\n  export({\n    publicKey = false,\n    privateKey = false,\n    includeContext = false,\n  }: {\n    publicKey?: boolean\n    privateKey?: boolean\n    includeContext?: boolean\n  } = {}): ExportedKey {\n    if (!(publicKey || privateKey)) {\n      throw new TypeError('export requires specifying either \"publicKey\" or \"privateKey\".')\n    }\n\n    if (privateKey && !this.privateKeyBase58) {\n      throw new TypeError('No privateKey to export.')\n    }\n\n    if (publicKey && !this.publicKeyBase58) {\n      throw new TypeError('No publicKey to export.')\n    }\n\n    const exported: ExportedKey = {\n      type: this.type,\n      id: this.id,\n      controller: this.controller,\n      revoked: this.revoked,\n    }\n\n    if (includeContext) {\n      exported['@context'] = EcdsaSecp256k1VerificationKey2019.SUITE_CONTEXT\n    }\n    if (privateKey) exported.privateKeyBase58 = this.privateKeyBase58\n    if (publicKey) exported.publicKeyBase58 = this.publicKeyBase58\n\n    return exported\n  }\n\n  signer() {\n    const { privateKeyBase58 } = this\n\n    if (!privateKeyBase58) {\n      return {\n        async sign() {\n          throw new Error('No private key to sign with.')\n        },\n        id: this.id,\n      }\n    }\n\n    return {\n      async sign({ data }: { data: Uint8Array }) {\n        const encodedHeader = base64url.encode(\n          JSON.stringify({\n            alg: 'ES256K',\n            b64: false,\n            crit: ['b64'],\n          }),\n        )\n\n        const payload = Buffer.from(data.buffer, data.byteOffset, data.length)\n        const digest = sha256(\n          Buffer.from(\n            Buffer.concat([Buffer.from(`${encodedHeader}.`, 'utf8'), Buffer.from(payload.buffer, payload.byteOffset, payload.length)]),\n          ),\n        )\n\n        const { signature } = secp256k1.ecdsaSign(digest, base58.decode(privateKeyBase58))\n        const encodedSignature = base64url.encode(Buffer.from(signature))\n\n        return `${encodedHeader}..${encodedSignature}`\n      },\n      id: this.id,\n    }\n  }\n\n  verifier() {\n    const { publicKeyBase58 } = this\n\n    if (!publicKeyBase58) {\n      return {\n        async verify() {\n          throw new Error('No public key to verify against')\n        },\n        id: this.id,\n      }\n    }\n\n    return {\n      async verify({ data, signature }: { data: Uint8Array; signature: string }) {\n        if (signature.indexOf('..') < 0) return false\n\n        const [encodedHeader, encodedSignature] = signature.split('..')\n        const header = JSON.parse(base64url.decode(encodedHeader))\n        const isHeaderInvalid =\n          header.alg !== 'ES256K' || header.b64 !== false || !header.crit || !header.crit.length || header.crit[0] !== 'b64'\n\n        if (isHeaderInvalid) return false\n\n        const payload = Buffer.from(data.buffer, data.byteOffset, data.length)\n        const digest = sha256(\n          Buffer.from(\n            Buffer.concat([Buffer.from(`${encodedHeader}.`, 'utf8'), Buffer.from(payload.buffer, payload.byteOffset, payload.length)]),\n          ),\n        )\n\n        let verified: boolean\n        try {\n          verified = secp256k1.ecdsaVerify(\n            Buffer.from(base64url.decode(encodedSignature, 'hex'), 'hex'),\n            digest,\n            base58.decode(publicKeyBase58),\n          )\n        } catch {\n          verified = false\n        }\n\n        return verified\n      },\n      id: this.id,\n    }\n  }\n}\n\nEcdsaSecp256k1VerificationKey2019.suite = SUITE_ID\nEcdsaSecp256k1VerificationKey2019.SUITE_CONTEXT = 'https://ns.did.ai/suites/secp256k1-2019/v1'\n","import secp256k1 from 'secp256k1'\n// @ts-expect-error: implicit type import; not a ts package\nimport keyto from '@trust/keyto'\n// @ts-expect-error: implicit type import; not a ts package\nimport * as base58 from 'base58-universal'\n\nconst compressedHexEncodedPublicKeyLength = 66\n\nexport type PrivateKeyJWK = {\n  kty: string\n  crv: string\n  d: string\n  x: string\n  y: string\n  kid: string\n}\n\nexport type PublicKeyJWK = {\n  kty: string\n  crv: string\n  x: string\n  y: string\n  kid: string\n}\n\nexport const publicKeyHexFrom = {\n  publicKeyBase58: (publicKeyBase58: string): string => Buffer.from(base58.decode(publicKeyBase58)).toString('hex'),\n  publicKeyJWK: (jwk: PublicKeyJWK): string =>\n    Buffer.from(\n      secp256k1.publicKeyConvert(\n        Buffer.from(\n          keyto\n            .from(\n              {\n                ...jwk,\n                crv: 'K-256',\n              },\n              'jwk',\n            )\n            .toString('blk', 'public'),\n          'hex',\n        ),\n        true,\n      ),\n    ).toString('hex'),\n  publicKeyUint8Array: (publicKeyUint8Array: Uint8Array): string => Buffer.from(publicKeyUint8Array).toString('hex'),\n  privateKeyHex: (privateKeyHex: string): string =>\n    Buffer.from(secp256k1.publicKeyCreate(new Uint8Array(Buffer.from(privateKeyHex, 'hex')))).toString('hex'),\n}\n\nexport const privateKeyHexFrom = {\n  privateKeyBase58: (privateKeyBase58: string): string => Buffer.from(base58.decode(privateKeyBase58)).toString('hex'),\n  privateKeyJWK: (jwk: PrivateKeyJWK): string =>\n    keyto\n      .from(\n        {\n          ...jwk,\n          crv: 'K-256',\n        },\n        'jwk',\n      )\n      .toString('blk', 'private'),\n  privateKeyUint8Array: (privateKeyUint8Array: Uint8Array): string => Buffer.from(privateKeyUint8Array).toString('hex'),\n}\n\nexport const publicKeyUint8ArrayFrom = {\n  publicKeyBase58: (publicKeyBase58: string): Uint8Array => base58.decode(publicKeyBase58),\n  publicKeyHex: (publicKeyHex: string): Uint8Array => Uint8Array.from(Buffer.from(publicKeyHex, 'hex')),\n  publicKeyJWK: (jwk: PublicKeyJWK): Uint8Array => {\n    let asBuffer = Buffer.from(publicKeyHexFrom.publicKeyJWK(jwk), 'hex')\n    let padding = 32 - asBuffer.length\n    while (padding > 0) {\n      asBuffer = Buffer.concat([Buffer.from('00', 'hex'), asBuffer])\n      padding -= 1\n    }\n    return Uint8Array.from(asBuffer)\n  },\n  privateKeyUint8Array: (privateKeyUint8Array: Uint8Array): Uint8Array => secp256k1.publicKeyCreate(privateKeyUint8Array),\n}\n\nexport const privateKeyUint8ArrayFrom = {\n  privateKeyBase58: (privateKeyBase58: string): Uint8Array => base58.decode(privateKeyBase58),\n  privateKeyHex: (privateKeyHex: string): Uint8Array => Uint8Array.from(Buffer.from(privateKeyHex, 'hex')),\n  privateKeyJWK: (jwk: PrivateKeyJWK): Uint8Array => {\n    let asBuffer = Buffer.from(privateKeyHexFrom.privateKeyJWK(jwk), 'hex')\n    let padding = 32 - asBuffer.length\n    while (padding > 0) {\n      asBuffer = Buffer.concat([Buffer.from('00', 'hex'), asBuffer])\n      padding -= 1\n    }\n    return Uint8Array.from(asBuffer)\n  },\n}\n\nexport const publicKeyJWKFrom = {\n  publicKeyBase58: (publicKeybase58: string, kid: string): PublicKeyJWK =>\n    publicKeyJWKFrom.publicKeyHex(Buffer.from(base58.decode(publicKeybase58)).toString('hex'), kid),\n  publicKeyHex: (publicKeyHex: string, kid: string): PublicKeyJWK => {\n    const key =\n      publicKeyHex.length === compressedHexEncodedPublicKeyLength\n        ? Buffer.from(secp256k1.publicKeyConvert(Buffer.from(publicKeyHex, 'hex'), false)).toString('hex')\n        : publicKeyHex\n\n    return {\n      ...keyto.from(key, 'blk').toJwk('public'),\n      crv: 'secp256k1',\n      kid,\n    }\n  },\n  publicKeyUint8Array: (publicKeyUint8Array: Uint8Array, kid: string): PublicKeyJWK =>\n    publicKeyJWKFrom.publicKeyHex(Buffer.from(publicKeyUint8Array).toString('hex'), kid),\n  privateKeyJWK: (privateKeyJWK: PrivateKeyJWK): PublicKeyJWK => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { d, ...publicKeyJWK } = privateKeyJWK\n\n    return publicKeyJWK\n  },\n}\n\nexport const privateKeyJWKFrom = {\n  privateKeyBase58: (privateKeybase58: string, kid: string): PrivateKeyJWK =>\n    privateKeyJWKFrom.privateKeyHex(Buffer.from(base58.decode(privateKeybase58)).toString('hex'), kid),\n  privateKeyHex: (privateKeyHex: string, kid: string): PrivateKeyJWK => ({\n    ...keyto.from(privateKeyHex, 'blk').toJwk('private'),\n    crv: 'secp256k1',\n    kid,\n  }),\n  privateKeyUint8Array: (privateKeyUint8Array: Uint8Array, kid: string): PrivateKeyJWK =>\n    privateKeyJWKFrom.privateKeyHex(privateKeyHexFrom.privateKeyUint8Array(privateKeyUint8Array), kid),\n}\n"],"names":["SUITE_ID","sha256","data","createHash","update","digest","EcdsaSecp256k1VerificationKey2019","cryptoLd","LDKeyPair","constructor","publicKeyBase58","privateKeyBase58","options","type","publicKey","secp256k1","base58","TypeError","from","publicKeyHex","privateKeyHex","rest","Buffer","undefined","generate","seed","compressed","keyPairOptions","Error","privateKey","Uint8Array","randomBytes","export","includeContext","exported","id","controller","revoked","SUITE_CONTEXT","signer","sign","encodedHeader","base64url","encode","JSON","stringify","alg","b64","crit","payload","buffer","byteOffset","length","concat","signature","encodedSignature","verifier","verify","indexOf","split","header","parse","decode","isHeaderInvalid","verified","suite","compressedHexEncodedPublicKeyLength","publicKeyHexFrom","toString","publicKeyJWK","jwk","publicKeyConvert","keyto","crv","publicKeyUint8Array","publicKeyCreate","privateKeyHexFrom","privateKeyJWK","privateKeyUint8Array","publicKeyUint8ArrayFrom","asBuffer","padding","privateKeyUint8ArrayFrom","publicKeyJWKFrom","publicKeybase58","kid","key","toJwk","d","privateKeyJWKFrom","privateKeybase58"],"mappings":"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"}